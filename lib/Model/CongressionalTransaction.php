<?php
/**
 * CongressionalTransaction
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * CongressionalTransaction Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CongressionalTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CongressionalTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_from' => 'float',
        'amount_to' => 'float',
        'asset_name' => 'string',
        'filing_date' => 'string',
        'name' => 'string',
        'owner_type' => 'string',
        'position' => 'string',
        'symbol' => 'string',
        'transaction_date' => 'string',
        'transaction_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_from' => 'float',
        'amount_to' => 'float',
        'asset_name' => null,
        'filing_date' => null,
        'name' => null,
        'owner_type' => null,
        'position' => null,
        'symbol' => null,
        'transaction_date' => null,
        'transaction_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_from' => 'amountFrom',
        'amount_to' => 'amountTo',
        'asset_name' => 'assetName',
        'filing_date' => 'filingDate',
        'name' => 'name',
        'owner_type' => 'ownerType',
        'position' => 'position',
        'symbol' => 'symbol',
        'transaction_date' => 'transactionDate',
        'transaction_type' => 'transactionType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_from' => 'setAmountFrom',
        'amount_to' => 'setAmountTo',
        'asset_name' => 'setAssetName',
        'filing_date' => 'setFilingDate',
        'name' => 'setName',
        'owner_type' => 'setOwnerType',
        'position' => 'setPosition',
        'symbol' => 'setSymbol',
        'transaction_date' => 'setTransactionDate',
        'transaction_type' => 'setTransactionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_from' => 'getAmountFrom',
        'amount_to' => 'getAmountTo',
        'asset_name' => 'getAssetName',
        'filing_date' => 'getFilingDate',
        'name' => 'getName',
        'owner_type' => 'getOwnerType',
        'position' => 'getPosition',
        'symbol' => 'getSymbol',
        'transaction_date' => 'getTransactionDate',
        'transaction_type' => 'getTransactionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_from'] = $data['amount_from'] ?? null;
        $this->container['amount_to'] = $data['amount_to'] ?? null;
        $this->container['asset_name'] = $data['asset_name'] ?? null;
        $this->container['filing_date'] = $data['filing_date'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['owner_type'] = $data['owner_type'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['transaction_date'] = $data['transaction_date'] ?? null;
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_from
     *
     * @return float|null
     */
    public function getAmountFrom()
    {
        return $this->container['amount_from'];
    }

    /**
     * Sets amount_from
     *
     * @param float|null $amount_from Transaction amount from.
     *
     * @return self
     */
    public function setAmountFrom($amount_from)
    {
        $this->container['amount_from'] = $amount_from;

        return $this;
    }

    /**
     * Gets amount_to
     *
     * @return float|null
     */
    public function getAmountTo()
    {
        return $this->container['amount_to'];
    }

    /**
     * Sets amount_to
     *
     * @param float|null $amount_to Transaction amount to.
     *
     * @return self
     */
    public function setAmountTo($amount_to)
    {
        $this->container['amount_to'] = $amount_to;

        return $this;
    }

    /**
     * Gets asset_name
     *
     * @return string|null
     */
    public function getAssetName()
    {
        return $this->container['asset_name'];
    }

    /**
     * Sets asset_name
     *
     * @param string|null $asset_name Asset name.
     *
     * @return self
     */
    public function setAssetName($asset_name)
    {
        $this->container['asset_name'] = $asset_name;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return string|null
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param string|null $filing_date Filing date.
     *
     * @return self
     */
    public function setFilingDate($filing_date)
    {
        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the representative.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner_type
     *
     * @return string|null
     */
    public function getOwnerType()
    {
        return $this->container['owner_type'];
    }

    /**
     * Sets owner_type
     *
     * @param string|null $owner_type Owner Type.
     *
     * @return self
     */
    public function setOwnerType($owner_type)
    {
        $this->container['owner_type'] = $owner_type;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position Position.
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Symbol.
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string|null $transaction_date Transaction date.
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Transaction type <code>Sale</code> or <code>Purchase</code>.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


