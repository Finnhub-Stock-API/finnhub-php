<?php
/**
 * InstitutionalOwnershipInfo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * InstitutionalOwnershipInfo Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InstitutionalOwnershipInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstitutionalOwnershipInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cik' => 'string',
        'name' => 'string',
        'put_call' => 'string',
        'change' => 'float',
        'no_voting' => 'float',
        'percentage' => 'float',
        'share' => 'float',
        'shared_voting' => 'float',
        'sole_voting' => 'float',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cik' => null,
        'name' => null,
        'put_call' => null,
        'change' => 'float',
        'no_voting' => 'float',
        'percentage' => 'float',
        'share' => 'float',
        'shared_voting' => 'float',
        'sole_voting' => 'float',
        'value' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cik' => 'cik',
        'name' => 'name',
        'put_call' => 'putCall',
        'change' => 'change',
        'no_voting' => 'noVoting',
        'percentage' => 'percentage',
        'share' => 'share',
        'shared_voting' => 'sharedVoting',
        'sole_voting' => 'soleVoting',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cik' => 'setCik',
        'name' => 'setName',
        'put_call' => 'setPutCall',
        'change' => 'setChange',
        'no_voting' => 'setNoVoting',
        'percentage' => 'setPercentage',
        'share' => 'setShare',
        'shared_voting' => 'setSharedVoting',
        'sole_voting' => 'setSoleVoting',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cik' => 'getCik',
        'name' => 'getName',
        'put_call' => 'getPutCall',
        'change' => 'getChange',
        'no_voting' => 'getNoVoting',
        'percentage' => 'getPercentage',
        'share' => 'getShare',
        'shared_voting' => 'getSharedVoting',
        'sole_voting' => 'getSoleVoting',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cik'] = $data['cik'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['put_call'] = $data['put_call'] ?? null;
        $this->container['change'] = $data['change'] ?? null;
        $this->container['no_voting'] = $data['no_voting'] ?? null;
        $this->container['percentage'] = $data['percentage'] ?? null;
        $this->container['share'] = $data['share'] ?? null;
        $this->container['shared_voting'] = $data['shared_voting'] ?? null;
        $this->container['sole_voting'] = $data['sole_voting'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cik
     *
     * @return string|null
     */
    public function getCik()
    {
        return $this->container['cik'];
    }

    /**
     * Sets cik
     *
     * @param string|null $cik Investor's company CIK.
     *
     * @return self
     */
    public function setCik($cik)
    {
        $this->container['cik'] = $cik;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Firm's name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets put_call
     *
     * @return string|null
     */
    public function getPutCall()
    {
        return $this->container['put_call'];
    }

    /**
     * Sets put_call
     *
     * @param string|null $put_call <code>put</code> or <code>call</code> for options.
     *
     * @return self
     */
    public function setPutCall($put_call)
    {
        $this->container['put_call'] = $put_call;

        return $this;
    }

    /**
     * Gets change
     *
     * @return float|null
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param float|null $change Number of shares change.
     *
     * @return self
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets no_voting
     *
     * @return float|null
     */
    public function getNoVoting()
    {
        return $this->container['no_voting'];
    }

    /**
     * Sets no_voting
     *
     * @param float|null $no_voting Number of shares with no voting rights.
     *
     * @return self
     */
    public function setNoVoting($no_voting)
    {
        $this->container['no_voting'] = $no_voting;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return float|null
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param float|null $percentage Percentage of portfolio.
     *
     * @return self
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets share
     *
     * @return float|null
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     *
     * @param float|null $share News score.
     *
     * @return self
     */
    public function setShare($share)
    {
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets shared_voting
     *
     * @return float|null
     */
    public function getSharedVoting()
    {
        return $this->container['shared_voting'];
    }

    /**
     * Sets shared_voting
     *
     * @param float|null $shared_voting Number of shares with shared voting rights.
     *
     * @return self
     */
    public function setSharedVoting($shared_voting)
    {
        $this->container['shared_voting'] = $shared_voting;

        return $this;
    }

    /**
     * Gets sole_voting
     *
     * @return float|null
     */
    public function getSoleVoting()
    {
        return $this->container['sole_voting'];
    }

    /**
     * Sets sole_voting
     *
     * @param float|null $sole_voting Number of shares with sole voting rights.
     *
     * @return self
     */
    public function setSoleVoting($sole_voting)
    {
        $this->container['sole_voting'] = $sole_voting;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value Position value.
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


