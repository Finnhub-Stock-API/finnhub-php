<?php
/**
 * CountryMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * CountryMetadata Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CountryMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CountryMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'code2' => 'string',
        'code3' => 'string',
        'code_no' => 'string',
        'currency' => 'string',
        'currency_code' => 'string',
        'region' => 'string',
        'sub_region' => 'string',
        'rating' => 'string',
        'default_spread' => 'float',
        'country_risk_premium' => 'float',
        'equity_risk_premium' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'code2' => null,
        'code3' => null,
        'code_no' => null,
        'currency' => null,
        'currency_code' => null,
        'region' => null,
        'sub_region' => null,
        'rating' => null,
        'default_spread' => 'float',
        'country_risk_premium' => 'float',
        'equity_risk_premium' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'code2' => 'code2',
        'code3' => 'code3',
        'code_no' => 'codeNo',
        'currency' => 'currency',
        'currency_code' => 'currencyCode',
        'region' => 'region',
        'sub_region' => 'subRegion',
        'rating' => 'rating',
        'default_spread' => 'defaultSpread',
        'country_risk_premium' => 'countryRiskPremium',
        'equity_risk_premium' => 'equityRiskPremium'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'code2' => 'setCode2',
        'code3' => 'setCode3',
        'code_no' => 'setCodeNo',
        'currency' => 'setCurrency',
        'currency_code' => 'setCurrencyCode',
        'region' => 'setRegion',
        'sub_region' => 'setSubRegion',
        'rating' => 'setRating',
        'default_spread' => 'setDefaultSpread',
        'country_risk_premium' => 'setCountryRiskPremium',
        'equity_risk_premium' => 'setEquityRiskPremium'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'code2' => 'getCode2',
        'code3' => 'getCode3',
        'code_no' => 'getCodeNo',
        'currency' => 'getCurrency',
        'currency_code' => 'getCurrencyCode',
        'region' => 'getRegion',
        'sub_region' => 'getSubRegion',
        'rating' => 'getRating',
        'default_spread' => 'getDefaultSpread',
        'country_risk_premium' => 'getCountryRiskPremium',
        'equity_risk_premium' => 'getEquityRiskPremium'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = $data['country'] ?? null;
        $this->container['code2'] = $data['code2'] ?? null;
        $this->container['code3'] = $data['code3'] ?? null;
        $this->container['code_no'] = $data['code_no'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['region'] = $data['region'] ?? null;
        $this->container['sub_region'] = $data['sub_region'] ?? null;
        $this->container['rating'] = $data['rating'] ?? null;
        $this->container['default_spread'] = $data['default_spread'] ?? null;
        $this->container['country_risk_premium'] = $data['country_risk_premium'] ?? null;
        $this->container['equity_risk_premium'] = $data['equity_risk_premium'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country name
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets code2
     *
     * @return string|null
     */
    public function getCode2()
    {
        return $this->container['code2'];
    }

    /**
     * Sets code2
     *
     * @param string|null $code2 Alpha 2 code
     *
     * @return self
     */
    public function setCode2($code2)
    {
        $this->container['code2'] = $code2;

        return $this;
    }

    /**
     * Gets code3
     *
     * @return string|null
     */
    public function getCode3()
    {
        return $this->container['code3'];
    }

    /**
     * Sets code3
     *
     * @param string|null $code3 Alpha 3 code
     *
     * @return self
     */
    public function setCode3($code3)
    {
        $this->container['code3'] = $code3;

        return $this;
    }

    /**
     * Gets code_no
     *
     * @return string|null
     */
    public function getCodeNo()
    {
        return $this->container['code_no'];
    }

    /**
     * Sets code_no
     *
     * @param string|null $code_no UN code
     *
     * @return self
     */
    public function setCodeNo($code_no)
    {
        $this->container['code_no'] = $code_no;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency name
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region
     *
     * @return self
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets sub_region
     *
     * @return string|null
     */
    public function getSubRegion()
    {
        return $this->container['sub_region'];
    }

    /**
     * Sets sub_region
     *
     * @param string|null $sub_region Sub-Region
     *
     * @return self
     */
    public function setSubRegion($sub_region)
    {
        $this->container['sub_region'] = $sub_region;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating Moody's credit risk rating.
     *
     * @return self
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets default_spread
     *
     * @return float|null
     */
    public function getDefaultSpread()
    {
        return $this->container['default_spread'];
    }

    /**
     * Sets default_spread
     *
     * @param float|null $default_spread Default spread
     *
     * @return self
     */
    public function setDefaultSpread($default_spread)
    {
        $this->container['default_spread'] = $default_spread;

        return $this;
    }

    /**
     * Gets country_risk_premium
     *
     * @return float|null
     */
    public function getCountryRiskPremium()
    {
        return $this->container['country_risk_premium'];
    }

    /**
     * Sets country_risk_premium
     *
     * @param float|null $country_risk_premium Country risk premium
     *
     * @return self
     */
    public function setCountryRiskPremium($country_risk_premium)
    {
        $this->container['country_risk_premium'] = $country_risk_premium;

        return $this;
    }

    /**
     * Gets equity_risk_premium
     *
     * @return float|null
     */
    public function getEquityRiskPremium()
    {
        return $this->container['equity_risk_premium'];
    }

    /**
     * Sets equity_risk_premium
     *
     * @param float|null $equity_risk_premium Equity risk premium
     *
     * @return self
     */
    public function setEquityRiskPremium($equity_risk_premium)
    {
        $this->container['equity_risk_premium'] = $equity_risk_premium;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


