<?php
/**
 * SentimentContent
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finnhub\Model;

use \ArrayAccess;
use \Finnhub\ObjectSerializer;

/**
 * SentimentContent Class Doc Comment
 *
 * @category Class
 * @package  Finnhub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SentimentContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SentimentContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mention' => 'int',
        'positive_mention' => 'int',
        'negative_mention' => 'int',
        'positive_score' => 'float',
        'negative_score' => 'float',
        'score' => 'float',
        'at_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mention' => 'int64',
        'positive_mention' => 'int64',
        'negative_mention' => 'int64',
        'positive_score' => 'float',
        'negative_score' => 'float',
        'score' => 'float',
        'at_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mention' => 'mention',
        'positive_mention' => 'positiveMention',
        'negative_mention' => 'negativeMention',
        'positive_score' => 'positiveScore',
        'negative_score' => 'negativeScore',
        'score' => 'score',
        'at_time' => 'atTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mention' => 'setMention',
        'positive_mention' => 'setPositiveMention',
        'negative_mention' => 'setNegativeMention',
        'positive_score' => 'setPositiveScore',
        'negative_score' => 'setNegativeScore',
        'score' => 'setScore',
        'at_time' => 'setAtTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mention' => 'getMention',
        'positive_mention' => 'getPositiveMention',
        'negative_mention' => 'getNegativeMention',
        'positive_score' => 'getPositiveScore',
        'negative_score' => 'getNegativeScore',
        'score' => 'getScore',
        'at_time' => 'getAtTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mention'] = $data['mention'] ?? null;
        $this->container['positive_mention'] = $data['positive_mention'] ?? null;
        $this->container['negative_mention'] = $data['negative_mention'] ?? null;
        $this->container['positive_score'] = $data['positive_score'] ?? null;
        $this->container['negative_score'] = $data['negative_score'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['at_time'] = $data['at_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mention
     *
     * @return int|null
     */
    public function getMention()
    {
        return $this->container['mention'];
    }

    /**
     * Sets mention
     *
     * @param int|null $mention Number of mentions
     *
     * @return self
     */
    public function setMention($mention)
    {
        $this->container['mention'] = $mention;

        return $this;
    }

    /**
     * Gets positive_mention
     *
     * @return int|null
     */
    public function getPositiveMention()
    {
        return $this->container['positive_mention'];
    }

    /**
     * Sets positive_mention
     *
     * @param int|null $positive_mention Number of positive mentions
     *
     * @return self
     */
    public function setPositiveMention($positive_mention)
    {
        $this->container['positive_mention'] = $positive_mention;

        return $this;
    }

    /**
     * Gets negative_mention
     *
     * @return int|null
     */
    public function getNegativeMention()
    {
        return $this->container['negative_mention'];
    }

    /**
     * Sets negative_mention
     *
     * @param int|null $negative_mention Number of negative mentions
     *
     * @return self
     */
    public function setNegativeMention($negative_mention)
    {
        $this->container['negative_mention'] = $negative_mention;

        return $this;
    }

    /**
     * Gets positive_score
     *
     * @return float|null
     */
    public function getPositiveScore()
    {
        return $this->container['positive_score'];
    }

    /**
     * Sets positive_score
     *
     * @param float|null $positive_score Positive score. Range 0-1
     *
     * @return self
     */
    public function setPositiveScore($positive_score)
    {
        $this->container['positive_score'] = $positive_score;

        return $this;
    }

    /**
     * Gets negative_score
     *
     * @return float|null
     */
    public function getNegativeScore()
    {
        return $this->container['negative_score'];
    }

    /**
     * Sets negative_score
     *
     * @param float|null $negative_score Negative score. Range 0-1
     *
     * @return self
     */
    public function setNegativeScore($negative_score)
    {
        $this->container['negative_score'] = $negative_score;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float|null $score Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative
     *
     * @return self
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets at_time
     *
     * @return string|null
     */
    public function getAtTime()
    {
        return $this->container['at_time'];
    }

    /**
     * Sets at_time
     *
     * @param string|null $at_time Period.
     *
     * @return self
     */
    public function setAtTime($at_time)
    {
        $this->container['at_time'] = $at_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


